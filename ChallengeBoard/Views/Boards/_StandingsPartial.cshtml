@using System.Text
@using NGravatar.Html
@using ChallengeBoard.Infrastucture;
@using ChallengeBoard.ViewModels;
@using PagedList.Mvc
@model StandingsViewModel
@{
    int p = int.TryParse(Request["page"], out p) ? p : 1;
    var rank = 1 + ((p - 1) * PageLimits.Standings);
}
<table class="table table-bordered table-striped no-more-tables sortedTable">
    <thead>
        <tr>
            <th class="centered">Rank</th>
            <th class="span4">@Html.DisplayNameFor(Model.Standings, m => m.Name)</th>
            <th class="centered">@Html.DisplayNameFor(Model.Standings, m => m.MatchesPlayed)</th>
            <th class="centered">@Html.DisplayNameFor(Model.Standings, m => m.Wins)</th>
            <th class="centered">@Html.DisplayNameFor(Model.Standings, m => m.Loses)</th>
            <th class="centered">@Html.DisplayNameFor(Model.Standings, m => m.Ties)</th>
            <th class="centered">@Html.DisplayNameFor(Model.Standings, m => m.Streak)</th>
            <th class="centered">@Html.DisplayNameFor(Model.Standings, m => m.WinPercentage)</th>
            <th class="centered">@Html.DisplayNameFor(Model.Standings, m => m.Rating)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var competitor in Model.Standings)
        {
            <tr>
                <td data-title="Rank" class="centered">@rank</td>
                
                <td data-title="@Html.DisplayNameFor(Model.Standings, m => m.Name)">
                    @Html.Gravatar(competitor.Profile.EmailAddress, 20, null, NGravatar.Rating.PG, null)&nbsp;
                    @Html.ActionLink(@competitor.Name, "Profile", "Competitors", new { boardId = Model.Board.BoardId, competitorId = competitor.CompetitorId }, null)
                </td>
                <td data-title="@Html.DisplayNameFor(Model.Standings, m => m.MatchesPlayed)" class="centered">@Html.DisplayFor(modelItem => competitor.MatchesPlayed)</td>
                <td data-title="@Html.DisplayNameFor(Model.Standings, m => m.Wins)" class="centered">@Html.DisplayFor(modelItem => competitor.Wins)</td>
                <td data-title="@Html.DisplayNameFor(Model.Standings, m => m.Loses)" class="centered">@Html.DisplayFor(modelItem => competitor.Loses)</td>
                <td data-title="@Html.DisplayNameFor(Model.Standings, m => m.Ties)" class="centered">@Html.DisplayFor(modelItem => competitor.Ties)</td>
                <td data-title="@Html.DisplayNameFor(Model.Standings, m => m.Streak)" class="centered">@Html.DisplayFor(modelItem => competitor.Streak)</td>
                <td data-title="@Html.DisplayNameFor(Model.Standings, m => m.WinPercentage)" class="centered">@Html.DisplayFor(modelItem => competitor.WinPercentage)</td>
                <td data-title="@Html.DisplayNameFor(Model.Standings, m => m.Rating)" class="centered">
                    @if (competitor.MatchesPlayed == 0)
                    {
                        @:-
                    }
                    else
                    {
                        @Html.DisplayFor(modelItem => competitor.Rating)
                    }
                </td>
            </tr>
            
            rank++;
        }
    </tbody>
</table>
@if(Model.Standings.PageCount > 1) {
    <div class="centered-text">
        @Html.PagedListPager( Model.Standings, page => Url.Action("Standings", new { page, unofficial = Model.Unofficial}) )
    </div>
}
@functions{

    public HtmlString MatchResult(string player, bool tie)
    {
        var sb = new StringBuilder();

        return (new HtmlString(sb.ToString()));
    }

}