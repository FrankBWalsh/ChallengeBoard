@using System.Web.Script.Serialization
@using ChallengeBoard.Models
@model ChallengeBoard.ViewModels.MatchViewModel
@{
    ViewBag.Title = "Report Match";
}
@Html.Partial("_HeaderPartial", new ChallengeBoard.Infrastucture.PageHeader(Model.Board.Name, "Report"))
<div class="alert alert-info fade in hidden" id="error">
    <a class="close">&times;</a>
    <strong>There was a problem with your match:</strong>
    <ul>
        <li id="errorMsg"></li>
    </ul>
</div>
@Html.Partial("_BoardNav", Model.Board)
<div class="well">
    Reporting matches is a simple affair.  Fill out the information below and validate your match.  If everything checks out, 
    you'll see a preview of the results prior to submitting them.  Once submitted, your opponent will be notified via email  
    and have <b>@Model.Board.AutoVerification</b> hours to reject the result.  If the match is not rejected, the result will become 
    official and the standings will be adjusted accordingly.
</div>
@using (Html.BeginForm("Validate", "Matches", new { boardId = Model.Board.BoardId }, FormMethod.Post, new { id = "MatchForm", @class = "form-horizontal" }))
{
    <div class="control-group">

        @Html.LabelFor(m => m.Loser, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(m => m.Loser, new
       {
           autofocus = "",
           autocomplete = "off",
           data_provide = "typeahead",
           data_source = new JavaScriptSerializer().Serialize(
           Model.Board.Competitors.Active()
                                  .Where(x => !x.Name.Equals(User.Identity.Name, StringComparison.InvariantCultureIgnoreCase))
                                  .Select(x => x.Name)
            )
       })
            @Html.ValidationMessageFor(m => m.Loser)
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">Reporting a</label>
        <div class="controls">
            <div class="switch" tabindex="0" data-on="info" data-off="primary"  data-animated="false" data-on-label="Tie" data-off-label="Win">
                <!--<input type="checkbox" value="@Model.Tie" name="Tie" id="Tie" class="checkbox" />-->
                @*@Html.CheckBoxFor(m => m.Tie, new {@class="checkbox"}) 
                Can't use this due to the autogenerated hidden input being put in the toggle div.
                Breaks boostrap-toggle.js.  Doing this manually for now.
                 *@
                <input class="hidden" data-val="true" data-val-required="The Match Tied? field is required." id="Tie" name="Tie" type="checkbox" value="true" />
            </div>
            <input name="Tie" type="hidden" value="false" />
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(m => m.WinnerComment, new { @class = "control-label" })
        <div class="controls">
            @Html.TextAreaFor(m => m.WinnerComment, new { @class = "span4", rows = "5"})
            @Html.ValidationMessageFor(m => m.WinnerComment)
            <span id="charNum" class="help-block">Limit 140 characters</span>
        </div>
    </div>
    <div class="form-actions">
        <button type="submit" class="btn btn-primary" id="ValidateMatch">Validate Match</button>
    </div>
}

<div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="myModalLabel" data-bind="text: !Tied() ? 'Reporting a Match Win' : 'Reporting a Match Tie'"></h3>
    </div>
    <div class="modal-body">
        <div class="centered-text matchVerification well">
            <h4 class="label-success" data-bind="text: !Tied() ? 'Winner' : 'Reporter'"></h4>
            <p data-bind="text: Winner.Name"></p>
            <p>
                <b>Rating Change:</b>
                &nbsp;
                <span data-bind="css: { 'arrow-up' : WinnerRatingDelta() > 0, 'arrow-down' : WinnerRatingDelta() < 0 }"></span>
                &nbsp;
                <span data-bind="text: WinnerRatingDelta"></span>
            </p>
        </div>
        <div class="matchSpacer">
        </div>
        <div class="centered-text matchVerification well">
            <h4 class="label-info" data-bind="text: !Tied() ? 'Loser' : 'Opponent'"></h4>
            <p data-bind="text: Loser.Name"></p>
            <p>
                <b>Rating Change:</b>
                &nbsp;
                <span data-bind="css: { 'arrow-up' : LoserRatingDelta() > 0, 'arrow-down' : LoserRatingDelta() < 0 }"></span>
                &nbsp;
                <span data-bind="text: LoserRatingDelta"></span>
            </p>
        </div>
        <p><b>Comments:</b> <span data-bind="text: WinnerComment"></span></p>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        <button id="report" class="btn btn-primary">Report Match</button>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/components")
    <script type="text/javascript">
        var MatchModel;
        
        $(function () {
            $('#WinnerComment').keyup(function () {
                var max = 140;
                var len = $(this).val().length;
                
                    var chars = max - len;
                    $('#charNum').text(chars + ' characters left.');
            });

            var form = $("#MatchForm");

            $('input[data-provide="typeahead"][autofocus]').trigger('focus');
            
            // Close ajax error result
            $('.alert .close').click(function () {
                $(this).parent().addClass('hidden');
            });
            
            // Report a match
            $('#report').click(function () {
                form.attr('action', form.attr('action').replace("validate", "create"));
                form.unbind('submit');

                $('#report').addClass('disabled');
                $('#report').attr('disabled', 'disabled');

                form.submit();
            });

            // Submit a match for validation
            form.submit(function () {
                $("#error").addClass('hidden');
                form.validate();

                if (!form.valid())
                    return (false);

                $.ajax({
                    type: 'POST',
                    data: $(this).serialize(),
                    url: form.attr('action'),
                    success: function (data) {
                        if (data.Error) {
                            $("#errorMsg").html(data.Message);
                            $("#error").removeClass('hidden');
                            return false;
                        }

                        MatchModel = ko.mapping.fromJS(data.Result);
                        ko.applyBindings(MatchModel);
                        
                        $('#myModal').modal();
                        return false;
                    },
                    error: function (xhr, status, error) {
                        $("#errorMsg").text(error);
                        $("#error").removeClass('hidden');
                    }
                });

                return (false);
            });
        });
    </script>
}